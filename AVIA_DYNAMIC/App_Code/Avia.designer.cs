#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Avia")]
public partial class AviaDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAirport(Airport instance);
  partial void UpdateAirport(Airport instance);
  partial void DeleteAirport(Airport instance);
  partial void InsertTicket(Ticket instance);
  partial void UpdateTicket(Ticket instance);
  partial void DeleteTicket(Ticket instance);
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertFlight(Flight instance);
  partial void UpdateFlight(Flight instance);
  partial void DeleteFlight(Flight instance);
  partial void InsertPlane(Plane instance);
  partial void UpdatePlane(Plane instance);
  partial void DeletePlane(Plane instance);
  #endregion
	
	public AviaDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AviaConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public AviaDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AviaDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AviaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AviaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Airport> Airports
	{
		get
		{
			return this.GetTable<Airport>();
		}
	}
	
	public System.Data.Linq.Table<Ticket> Tickets
	{
		get
		{
			return this.GetTable<Ticket>();
		}
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<Flight> Flights
	{
		get
		{
			return this.GetTable<Flight>();
		}
	}
	
	public System.Data.Linq.Table<Plane> Planes
	{
		get
		{
			return this.GetTable<Plane>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airport")]
public partial class Airport : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AirportID;
	
	private string _AirportName;
	
	private string _Address;
	
	private string _City;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAirportIDChanging(int value);
    partial void OnAirportIDChanged();
    partial void OnAirportNameChanging(string value);
    partial void OnAirportNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
	
	public Airport()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AirportID
	{
		get
		{
			return this._AirportID;
		}
		set
		{
			if ((this._AirportID != value))
			{
				this.OnAirportIDChanging(value);
				this.SendPropertyChanging();
				this._AirportID = value;
				this.SendPropertyChanged("AirportID");
				this.OnAirportIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string AirportName
	{
		get
		{
			return this._AirportName;
		}
		set
		{
			if ((this._AirportName != value))
			{
				this.OnAirportNameChanging(value);
				this.SendPropertyChanging();
				this._AirportName = value;
				this.SendPropertyChanged("AirportName");
				this.OnAirportNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TicketId;
	
	private int _FlightId;
	
	private string _SeatNumber;
	
	private EntityRef<Flight> _Flight;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnFlightIdChanging(int value);
    partial void OnFlightIdChanged();
    partial void OnSeatNumberChanging(string value);
    partial void OnSeatNumberChanged();
    #endregion
	
	public Ticket()
	{
		this._Flight = default(EntityRef<Flight>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TicketId
	{
		get
		{
			return this._TicketId;
		}
		set
		{
			if ((this._TicketId != value))
			{
				this.OnTicketIdChanging(value);
				this.SendPropertyChanging();
				this._TicketId = value;
				this.SendPropertyChanged("TicketId");
				this.OnTicketIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightId", DbType="Int NOT NULL")]
	public int FlightId
	{
		get
		{
			return this._FlightId;
		}
		set
		{
			if ((this._FlightId != value))
			{
				if (this._Flight.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFlightIdChanging(value);
				this.SendPropertyChanging();
				this._FlightId = value;
				this.SendPropertyChanged("FlightId");
				this.OnFlightIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatNumber", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string SeatNumber
	{
		get
		{
			return this._SeatNumber;
		}
		set
		{
			if ((this._SeatNumber != value))
			{
				this.OnSeatNumberChanging(value);
				this.SendPropertyChanging();
				this._SeatNumber = value;
				this.SendPropertyChanged("SeatNumber");
				this.OnSeatNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Ticket", Storage="_Flight", ThisKey="FlightId", OtherKey="flight1", IsForeignKey=true)]
	public Flight Flight
	{
		get
		{
			return this._Flight.Entity;
		}
		set
		{
			Flight previousValue = this._Flight.Entity;
			if (((previousValue != value) 
						|| (this._Flight.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Flight.Entity = null;
					previousValue.Tickets.Remove(this);
				}
				this._Flight.Entity = value;
				if ((value != null))
				{
					value.Tickets.Add(this);
					this._FlightId = value.flight1;
				}
				else
				{
					this._FlightId = default(int);
				}
				this.SendPropertyChanged("Flight");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CompanyID;
	
	private string _CompanyName;
	
	private EntitySet<Plane> _Planes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    #endregion
	
	public Company()
	{
		this._Planes = new EntitySet<Plane>(new Action<Plane>(this.attach_Planes), new Action<Plane>(this.detach_Planes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CompanyName
	{
		get
		{
			return this._CompanyName;
		}
		set
		{
			if ((this._CompanyName != value))
			{
				this.OnCompanyNameChanging(value);
				this.SendPropertyChanging();
				this._CompanyName = value;
				this.SendPropertyChanged("CompanyName");
				this.OnCompanyNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Plane", Storage="_Planes", ThisKey="CompanyID", OtherKey="CompanyID")]
	public EntitySet<Plane> Planes
	{
		get
		{
			return this._Planes;
		}
		set
		{
			this._Planes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Planes(Plane entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Planes(Plane entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flights")]
public partial class Flight : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _flight1;
	
	private System.DateTime _Date;
	
	private string _From;
	
	private string _To;
	
	private int _Plane;
	
	private EntitySet<Ticket> _Tickets;
	
	private EntityRef<Plane> _Plane1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onflight1Changing(int value);
    partial void Onflight1Changed();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnFromChanging(string value);
    partial void OnFromChanged();
    partial void OnToChanging(string value);
    partial void OnToChanged();
    partial void OnPlaneChanging(int value);
    partial void OnPlaneChanged();
    #endregion
	
	public Flight()
	{
		this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
		this._Plane1 = default(EntityRef<Plane>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="flight", Storage="_flight1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int flight1
	{
		get
		{
			return this._flight1;
		}
		set
		{
			if ((this._flight1 != value))
			{
				this.Onflight1Changing(value);
				this.SendPropertyChanging();
				this._flight1 = value;
				this.SendPropertyChanged("flight1");
				this.Onflight1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plane", DbType="Int NOT NULL")]
	public int Plane
	{
		get
		{
			return this._Plane;
		}
		set
		{
			if ((this._Plane != value))
			{
				if (this._Plane1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlaneChanging(value);
				this.SendPropertyChanging();
				this._Plane = value;
				this.SendPropertyChanged("Plane");
				this.OnPlaneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Ticket", Storage="_Tickets", ThisKey="flight1", OtherKey="FlightId")]
	public EntitySet<Ticket> Tickets
	{
		get
		{
			return this._Tickets;
		}
		set
		{
			this._Tickets.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plane_Flight", Storage="_Plane1", ThisKey="Plane", OtherKey="PlaneNum", IsForeignKey=true)]
	public Plane Plane1
	{
		get
		{
			return this._Plane1.Entity;
		}
		set
		{
			Plane previousValue = this._Plane1.Entity;
			if (((previousValue != value) 
						|| (this._Plane1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Plane1.Entity = null;
					previousValue.Flights.Remove(this);
				}
				this._Plane1.Entity = value;
				if ((value != null))
				{
					value.Flights.Add(this);
					this._Plane = value.PlaneNum;
				}
				else
				{
					this._Plane = default(int);
				}
				this.SendPropertyChanged("Plane1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Tickets(Ticket entity)
	{
		this.SendPropertyChanging();
		entity.Flight = this;
	}
	
	private void detach_Tickets(Ticket entity)
	{
		this.SendPropertyChanging();
		entity.Flight = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Planes")]
public partial class Plane : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PlaneNum;
	
	private bool _InFlight;
	
	private int _Seats;
	
	private int _AvailableSeats;
	
	private int _CompanyID;
	
	private EntitySet<Flight> _Flights;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaneNumChanging(int value);
    partial void OnPlaneNumChanged();
    partial void OnInFlightChanging(bool value);
    partial void OnInFlightChanged();
    partial void OnSeatsChanging(int value);
    partial void OnSeatsChanged();
    partial void OnAvailableSeatsChanging(int value);
    partial void OnAvailableSeatsChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
	
	public Plane()
	{
		this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaneNum", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PlaneNum
	{
		get
		{
			return this._PlaneNum;
		}
		set
		{
			if ((this._PlaneNum != value))
			{
				this.OnPlaneNumChanging(value);
				this.SendPropertyChanging();
				this._PlaneNum = value;
				this.SendPropertyChanged("PlaneNum");
				this.OnPlaneNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InFlight", DbType="Bit NOT NULL")]
	public bool InFlight
	{
		get
		{
			return this._InFlight;
		}
		set
		{
			if ((this._InFlight != value))
			{
				this.OnInFlightChanging(value);
				this.SendPropertyChanging();
				this._InFlight = value;
				this.SendPropertyChanged("InFlight");
				this.OnInFlightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seats", DbType="Int NOT NULL")]
	public int Seats
	{
		get
		{
			return this._Seats;
		}
		set
		{
			if ((this._Seats != value))
			{
				this.OnSeatsChanging(value);
				this.SendPropertyChanging();
				this._Seats = value;
				this.SendPropertyChanged("Seats");
				this.OnSeatsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableSeats", DbType="Int NOT NULL")]
	public int AvailableSeats
	{
		get
		{
			return this._AvailableSeats;
		}
		set
		{
			if ((this._AvailableSeats != value))
			{
				this.OnAvailableSeatsChanging(value);
				this.SendPropertyChanging();
				this._AvailableSeats = value;
				this.SendPropertyChanged("AvailableSeats");
				this.OnAvailableSeatsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plane_Flight", Storage="_Flights", ThisKey="PlaneNum", OtherKey="Plane")]
	public EntitySet<Flight> Flights
	{
		get
		{
			return this._Flights;
		}
		set
		{
			this._Flights.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Plane", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Planes.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Planes.Add(this);
					this._CompanyID = value.CompanyID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Flights(Flight entity)
	{
		this.SendPropertyChanging();
		entity.Plane1 = this;
	}
	
	private void detach_Flights(Flight entity)
	{
		this.SendPropertyChanging();
		entity.Plane1 = null;
	}
}
#pragma warning restore 1591
